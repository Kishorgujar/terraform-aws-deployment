version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.x
    commands:
      - echo "Installing Terraform..."
      - curl -Lo terraform.zip https://releases.hashicorp.com/terraform/1.0.0/terraform_1.0.0_linux_amd64.zip
      - unzip terraform.zip
      - mv terraform /usr/local/bin/
      - chmod +x /usr/local/bin/terraform
      
      - echo "Installing OPA..."
      - curl -Lo opa https://github.com/open-policy-agent/opa/releases/latest/download/opa_linux_amd64
      - mv opa /usr/local/bin/
      - chmod +x /usr/local/bin/opa

  pre_build:
    commands:
      - echo "Initializing Terraform..."
      - terraform init
      - if [ $? -ne 0 ]; then echo "Terraform init failed"; exit 1; fi
      - echo "Running pre-build steps..."
      - terraform validate
      - if [ $? -ne 0 ]; then echo "Terraform validate failed"; exit 1; fi
  build:
    commands:
      - echo "Running Terraform plan..."
      - terraform plan -out=tfplan
      - if [ $? -ne 0 ]; then echo "Terraform plan failed"; exit 1; fi
      
      - echo "Converting Terraform plan to JSON for OPA evaluation..."
      - terraform show -json tfplan > tfplan.json
      
      - echo "Evaluating policy with OPA..."
      - opa eval --input tfplan.json --data policy.rego "data.terraform.s3.deny"
      - if [ $? -ne 0 ]; then echo "OPA evaluation failed"; exit 1; fi

  post_build:
    commands:
      - echo "Applying Terraform changes..."
      - terraform apply -auto-approve tfplan
      - if [ $? -ne 0 ]; then echo "Terraform apply failed"; exit 1; fi

artifacts:
  files:
    - '**/*'
  discard-paths: yes

cache:
  paths:
    - ~/.terraform/plugins
