version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.x  # Optional, adjust as necessary
    commands:
      - echo Installing Terraform
      - curl -o terraform.zip https://releases.hashicorp.com/terraform/$(curl -s https://checkpoint-api.hashicorp.com/v1/check/terraform | jq -r .current_version)/terraform_$(curl -s https://checkpoint-api.hashicorp.com/v1/check/terraform | jq -r .current_version)_linux_amd64.zip
      - unzip terraform.zip
      - sudo mv terraform /usr/local/bin/
      - terraform --version
      - echo Installing OPA
      - curl -L -o opa https://github.com/open-policy-agent/opa/releases/latest/download/opa_linux_amd64
      - chmod +x opa
      - sudo mv opa /usr/local/bin/
      - opa version

  pre_build:
    commands:
      - echo Pre-build phase
      - terraform init

  build:
    commands:
      - echo Build phase
      - terraform plan -out=tfplan

      # Evaluate the OPA policy for tag modifications on S3 buckets
      - |
        OPA_RESULT=$(opa eval --data policy.rego --input tfplan "data.terraform.s3.deny")
        echo "$OPA_RESULT"
        if echo "$OPA_RESULT" | grep -q 'true'; then
          echo "Policy violation: S3 bucket tag modification is not allowed."
          exit 1
        else
          echo "Policy check passed."
        fi

      # Handle potential error if the bucket already exists
      - |
        terraform apply -auto-approve tfplan || {
          echo "Error applying Terraform plan. Checking for existing bucket..."
          if terraform show tfplan | grep -q 'Error:'; then
            echo "There was an error applying the plan. This may be due to an existing S3 bucket."
          fi
          exit 1
        }

  post_build:
    commands:
      - echo Post-build phase
      - echo "Build completed on `date`"
